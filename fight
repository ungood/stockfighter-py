#!/usr/bin/env python
import argparse
import logging
import os

import colorlog

from stockfighter import config, api
import levels

logger = logging.getLogger(__name__)

class Command(object):
    def __init__(self, args):
        self.args = args
        
class AuthorizeCommand(Command):
    @staticmethod
    def create_parser(parent):
        return parent.add_parser('authorize', help='Store authorization keys.')
    
    def __call__(self):
        config.set_stockfighter_api_key()

class LevelsCommand(Command):
    @staticmethod
    def create_parser(parent):
        return parent.add_parser('list', help='List levels.')
    
    def __call__(self):
        for level_name in levels.__all__:
            try:
                instance_id = config.get_instance_id(level_name)
                print("{} - {}".format(level_name, instance_id))
            except KeyError:
                print(level_name)
                

class SolveCommand(Command):
    @staticmethod
    def create_parser(parent):
        parser = parent.add_parser('solve', help='Solve the level.')
        parser.add_argument('level', choices=levels.__all__)
        return parser
    
    def __call__(self):
        level_name = self.args.level
        api_key = config.get_stockfighter_api_key()
        session = api.Session(api_key)
        gm = session.gm
        sf = session.sf
        
        logger.info("Retrieving data for level '%s'.", level_name)
        level_data = gm.levels[level_name].start()
        logger.debug(level_data)
        
        instance_id = level_data['instanceId']
        logger.info("Retrieving data for instance '%s'.", instance_id)
        instance = gm.instances[instance_id]
        #logger.debug(instance.get())

        #logger.info("Restarting level.")
        #instance.restart()
        
        logger.info("Solving level '%s'.", level)
        sf.heartbeat()    
        levels.solve(level, sf, level_info)
        
        logger.info("Stopping level if solved.")
        instance_data = instance.get()
        
        if instance_data['done'] is False:
            logger.warning("Level is not solved!")
        else:
            logger.info("Level is solved.  Stopping.")
            instance.stop()
        
def build_parser():
    parser = argparse.ArgumentParser(description='Play Stockfighter.io!')
    group = parser.add_argument_group('General Arguments')
    group.add_argument(
        '--embed',
        action="store_true",
        help='Open python interpreter after program termination')
    parser.add_argument(
        '-v', '--verbose',
        help="Output verbose messages.",
        action="store_const", dest="loglevel", const=logging.DEBUG, default=logging.INFO)
    
    subparser = parser.add_subparsers(title='Commands')
     
    for cmd in [AuthorizeCommand, LevelsCommand, SolveCommand]:
        cmd_parser = cmd.create_parser(subparser)
        cmd_parser.set_defaults(command=cmd)
     
    return parser
    
def configure_logging(log_level):
    logformat = "%(log_color)s%(levelname)-8s%(reset)s: %(log_color)s%(message)s%(reset)s"
    formatter = colorlog.ColoredFormatter(logformat)

    stream = logging.StreamHandler()
    stream.setLevel(log_level)
    stream.setFormatter(formatter)
    
    logging.root.setLevel(log_level)
    logging.root.addHandler(stream)

def main():
    parser = build_parser()
    args = parser.parse_args()
    configure_logging(args.loglevel)
    
    if 'command' in args:
        command = args.command(args)
        result = command()
        if result is not None:
            parser.exit(result)
    else:
        parser.error('Please enter a command!')

if __name__=="__main__":
    main()